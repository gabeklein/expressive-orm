import { Field, Type } from '..';
import { Builder as QB } from './Builder';
import { Computed } from './math';
import { Syntax } from './syntax';

declare namespace Query { 
  namespace Table {
    interface Ref {
      alias?: string;
      id: string;
      toString(): string;
    }
  }
  
  interface Table<T extends Type = any> {
    name: Table.Ref;
    proxy: Query.From<T>;
    local: Map<string, Field>;
    join?: {
      as: Query.Join.Mode;
      on: Set<Syntax>;
    }
    toString(): string;
  }

  type Builder<T = any> = QB<T>;
  
  type Compare = Syntax | Compare[] | undefined;

  type FieldOrValue<T> = T extends Value<infer U> ? U : T;

  type From<T extends Type = Type> = {
    [K in Type.Fields<T>]: T[K] extends Field.Queries<infer U> ? U : T[K];
  }

  namespace Join {
    type Mode = "left" | "inner";

    // TODO: does not chain like actual Compare
    type Where = <T extends Field>(field: T) => Field.Compare<FieldOrValue<T>>;

    type Function = (on: Where) => void;

    type Equal<T extends Type = any> = { [K in keyof T]?: Field | Query.From };
    
    type On<T extends Type> = Function | Equal<T>;

    type Left<T extends Type> = Partial<From<T>>;
  }

  type Join<T extends Type> = From<T>;

  type Value<T = any> = T | Field<T> | Computed<T>

  type Where = Builder["where"] & { name: string };

  type Updates<T> = Field.Updates<T> | T;

  type Update<T extends Type> = {
    [K in Type.Fields<T>]?: Updates<T[K]>;
  }

  type Function<R> = (where: Where) => R;

  type Template<A, R> = (where: Where, ...args: A[]) => R;

  type Extract<T> =
    T extends Field.Returns<infer R> ? R :
    T extends From<infer U> ? { [J in Type.Fields<U>]: Extract<U[J]> } :
    T extends {} ? { [K in keyof T]: Extract<T[K]> } :
    T;

  type Asserts<T extends Field> = ReturnType<T["compare"]> & {
    asc(): void;
    desc(): void;
  };

  interface Verbs <T extends Type> {
    delete(): void;
    update(values: Query.Update<T>): void;
  }
}

interface Query<T> extends PromiseLike<T> {
  /** Counts the number of rows that would be selected. */
  count(): Promise<number>;

  /** Returns the SQL string generated by this query. */
  toString(): string;
}

interface SelectQuery<T> extends Query<T[]> {
  /**
   * Returns the first rows which match creteria.
   * 
   * @param limit The maximum number of rows to return.
   */
  get(limit?: number): Promise<T[]>;

  /**
   * Returns the first row that matches creteria.
   * 
   * @param orFail If true, will throw an error if no results are returned.
   */
  one(orFail?: boolean): Promise<T>;
}

function Query<T extends {}>(from: Query.Function<T>): SelectQuery<Query.Extract<T>>;

/**
 * Creates a new query.
 * 
 * If no selection is returned by the constructor, will return
 * the number of rows that would be selected or modified.
 */
function Query(from: Query.Function<void>): Query<number>;

function Query<T = void>(factory: Query.Function<T>): Query<T> | SelectQuery<T> {
  const builder = new QB(factory);

  const get = (limit?: number) => limit
    ? builder.extend({ limit }).execute()
    : builder.execute();

  const one = (orFail?: boolean) => get(1).then(res => {
    if (res.length == 0 && orFail)
      throw new Error("Query returned no results.");

    return res[0] as T;
  });

  const runner: Query<T> = {
    then: (resolve, reject) => get().then(resolve).catch(reject),
    count: () => builder.extend({ selects: undefined, parse: undefined }).execute(),
    toString: () => String(builder)
  }

  return builder.selects
    ? { ...runner, get, one }
    : runner;
}


export { Query, SelectQuery };